// Code generated by mockery v2.33.2. DO NOT EDIT.

package mocks

import (
	domain "robinhood/domain"

	mock "github.com/stretchr/testify/mock"
)

// AppointmentRepo is an autogenerated mock type for the AppointmentRepo type
type AppointmentRepo struct {
	mock.Mock
}

// GetAllItemByLastKey provides a mock function with given fields: lastKey, limit
func (_m *AppointmentRepo) GetAllItemByLastKey(lastKey string, limit int32) ([]*domain.Appointment, error) {
	ret := _m.Called(lastKey, limit)

	var r0 []*domain.Appointment
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int32) ([]*domain.Appointment, error)); ok {
		return rf(lastKey, limit)
	}
	if rf, ok := ret.Get(0).(func(string, int32) []*domain.Appointment); ok {
		r0 = rf(lastKey, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Appointment)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int32) error); ok {
		r1 = rf(lastKey, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAppointmentByAppId provides a mock function with given fields: appId
func (_m *AppointmentRepo) GetAppointmentByAppId(appId string) (*domain.Appointment, error) {
	ret := _m.Called(appId)

	var r0 *domain.Appointment
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domain.Appointment, error)); ok {
		return rf(appId)
	}
	if rf, ok := ret.Get(0).(func(string) *domain.Appointment); ok {
		r0 = rf(appId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Appointment)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(appId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveAppointment provides a mock function with given fields: appointment
func (_m *AppointmentRepo) SaveAppointment(appointment *domain.Appointment) error {
	ret := _m.Called(appointment)

	var r0 error
	if rf, ok := ret.Get(0).(func(*domain.Appointment) error); ok {
		r0 = rf(appointment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAppointmentRepo creates a new instance of AppointmentRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAppointmentRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *AppointmentRepo {
	mock := &AppointmentRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
